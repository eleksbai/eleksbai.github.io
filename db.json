{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"source/favicon.png","path":"favicon.png","modified":1,"renderable":0},{"_id":"source/images/2022/gitee-callback-error.png","path":"images/2022/gitee-callback-error.png","modified":1,"renderable":0},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/favicon.png","hash":"3ca53a78fd6ee767e6a527069cc95e7be315d3b4","modified":1669604258097},{"_id":"source/_posts/2023-01-16-Hexo-quick-start.md","hash":"5c12275571bc8cb6a6a8781641513f633acce21c","modified":1673854162972},{"_id":"source/_posts/2022-11-10-fix-vssue-for-gitee.md","hash":"a4139b41f29aa4493ed85a0dbb01612f82365fd7","modified":1673853641660},{"_id":"source/images/2022/gitee-callback-error.png","hash":"96ea38f1f5c01d7d4f44b39c0c30b5ae58e787fc","modified":1668087815464},{"_id":"source/_posts/2018-08-14-celery_first.md","hash":"266e5040b2d988e5ce33f020ba91873dce94401d","modified":1673845152332},{"_id":"source/_posts/2018-08-14-docker_shell.md","hash":"fb32a7fa909ac0925e2bf1a22f807cf46bc7b920","modified":1673845152332},{"_id":"source/_posts/2022-10-29-vuepress-quick-start.md","hash":"324d299b437dd4632bf3ab080a3f4dd49411511a","modified":1673845152332},{"_id":"themes/landscape/.npmignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1673845152332},{"_id":"themes/landscape/_config.yml","hash":"79ac6b9ed6a4de5a21ea53fc3f5a3de92e2475ff","modified":1673845152332},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1673845152332},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1673845152332},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1673845152332},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1673845152332},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1673845152332},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1673845152332},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1673845152332},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1673845152332},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1673845152332},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1673845152332},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":1673845152332},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1673845152332},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1673845152332},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1673845152332},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1673845152332},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1673845152332},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1673845152332},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1673845152332},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1673845152332},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1673845152332},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1673845152332},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1673845152332},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1673845152332},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1673845152332},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1673845152332},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1673845152332},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1673845152332},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1673845152332},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1673845152332},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1673845152332},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1673845152332},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1673845152332},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1673845152332},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1673845152332},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1673845152332},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1673845152332},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1673845152332},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1673845152332},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1673845152332},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1673845152332},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1673845152336},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1673845152336},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1673845152340},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1673845152340},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1673845152340},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1673845152340},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1673845152340},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1673845152340},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1673845152340},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1673845152340},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1673845152340},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1673845152332},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1673845152332},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1673845152332},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1673845152332},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1673845152332},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1673845152336},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1673845152336},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1673845152336},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1673845152336},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1673845152336},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1673845152336},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1673845152336},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1673845152336},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1673845152332},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1673845152336},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1673845152336},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1673845152336},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1673845152340},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1673845152340},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1673845152336},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1673845152336},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1673845152336},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1673845152336},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1673845152340},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1673845152340},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1673845152340},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1673845152340},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1673845152340},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1673845152340},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1673845152336},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1673845152340},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1673845152336},{"_id":"public/Hexo-quick-start/index.html","hash":"c3ea17ebe56c8505d6209b10cc9d355813362d29","modified":1673854210624},{"_id":"public/celery_first/index.html","hash":"47845f039ea914b710251bc15b88d5a9905d8771","modified":1673854210624},{"_id":"public/archives/index.html","hash":"3b4bc53b94a59e39dfccd83f63143994d15618d9","modified":1673854210624},{"_id":"public/archives/2018/index.html","hash":"4ac9b1a7e6c6ba2546bb145ed17c9248a45788f0","modified":1673854210624},{"_id":"public/archives/2018/08/index.html","hash":"35e8178ba2d569feb71924b430fcd9cca6e3473d","modified":1673854210624},{"_id":"public/archives/2022/index.html","hash":"9e957e9b63623dff96183bb6860b17f4bdfce625","modified":1673854210624},{"_id":"public/archives/2022/10/index.html","hash":"43ae6d8c2813dc826235c507314094bb64844824","modified":1673854210624},{"_id":"public/archives/2022/11/index.html","hash":"2bf0d9a4308e45ec45da8301f32735c56efafea8","modified":1673854210624},{"_id":"public/archives/2023/index.html","hash":"d2f86ae6ffc43bc722187968b7e95552f903c4a8","modified":1673854210624},{"_id":"public/archives/2023/01/index.html","hash":"9eff81d87744766ad0aa36ed1151e828ed26b25b","modified":1673854210624},{"_id":"public/categories/python/index.html","hash":"abe59f7f08f735ba08ba4af2d116e5803e26c559","modified":1673854210624},{"_id":"public/categories/docker/index.html","hash":"eed8c33611c9f9c3728ddd8e2b136cfab34a6996","modified":1673854210624},{"_id":"public/tags/vuepress/index.html","hash":"b002abaadf642911c85ee3e2f4f51c548f2c0b6d","modified":1673854210624},{"_id":"public/tags/blog/index.html","hash":"a96b71048a4db01f078ce2a1150f790c42a1198d","modified":1673854210624},{"_id":"public/fix-vssue-for-gitee/index.html","hash":"fa8a370bb759aa8203488a6e997bbd298c5ee83d","modified":1673854210624},{"_id":"public/vuepress-quick-start/index.html","hash":"21e7b8649b78b25459504d589927c1223593b199","modified":1673854210624},{"_id":"public/docker_shell/index.html","hash":"6a8aa88455ca0364d4e4082ab7bb98adabf727df","modified":1673854210624},{"_id":"public/index.html","hash":"52d5f360b28b08d61caaa43abb516994d1ad2d47","modified":1673854210624},{"_id":"public/favicon.png","hash":"3ca53a78fd6ee767e6a527069cc95e7be315d3b4","modified":1673854210624},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1673854210624},{"_id":"public/images/2022/gitee-callback-error.png","hash":"96ea38f1f5c01d7d4f44b39c0c30b5ae58e787fc","modified":1673854210624},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1673854210624},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1673854210624},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1673854210624},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1673854210624},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1673854210624},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1673854210624},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1673854210624},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1673854210624},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1673854210624},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1673854210624},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1673854210624},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1673854210624},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1673854210624},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1673854210624},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1673854210624},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1673854210624},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1673854210624},{"_id":"public/css/style.css","hash":"3986ef4b1f56bf0ac3bc45aab261e0278794c3f1","modified":1673854210624},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1673854210624},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1673854210624},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1673854210624},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1673854210624}],"Category":[{"name":"python","_id":"clcyhkv000002dz2t2qzp9vns"},{"name":"docker","_id":"clcyhkv040007dz2tfw742ei6"}],"Data":[],"Page":[],"Post":[{"layout":"default","title":"celery_first 官网基础入门教程","date":"2018-08-14T08:16:01.000Z","_content":"# celery_first 最小实验\n## 概述\ncelery 将工作进行分解为：\n\n函数，调用函数，结果容器，函数结果\n\n1. 初始化函数准备工作\n2. 调用函数立即返回一个结果容器\n3. 函数接收任务开始工作，抛出函数结果\n4. 函数结果去填充到结果容器\n\n## 工作者\n\n工作者示例代码\ntasks.py\n~~~python\nfrom celery import Celery\n\napp = Celery('tasks', broker='pyamqp://guest@192.168.146.129//', backend='redis://192.168.146.129')\n\n\n@app.task\ndef add(x, y):\n    # 占时间12秒\n    for i in range(123456):\n        a = 999 ** 999\n        del a\n    return x + y\n~~~\n\n工作者流程\n1. 准备工作，监听消息队列，获取任务安排\n2. 取到任务马上工作，工作完成写入到后端。（工作者是否并发待测试） \n\n启动工作者\ncelery -A your_app_name worker --pool=solo -l info\nwindows下使用报错解决方案\ncelery -A your_app_name worker --pool=solo -l info\n\n## 安排工作者进行工作\n\n调用工作者执行任务流程\n1. 导入工作者的任务方法\n2. 执行任务方法\n3. 立即返回一个异步结果，包含该执行任务的id\n4. 异步结果包含任务结果，初始状态为空，工作者完成工作后自动取得任务结果\n\n**内存假想**\n\n立即返回的结果指向一块内存区间，内存区间有一部分初始状态。\n当工作者任务结束会把结果数据写到该内存区间\n\n\n\n调用工作者示例代码\ntasks.py（续）\n~~~python\nimport time\ndef test_run():\n    r1 = add.delay(10, 1)\n    r2 = add.delay(10, 2)\n    i = 1\n    while 1:\n        print('第%s秒' % i, r1.result, r2.result)\n        if r1.result and r2.result:\n            break\n        time.sleep(1)\n        i += 1\n~~~\n\n调用工作者方法\n1. pycharm 运行 tasks.py文件，勾选 Run with Python console\n2. test_run()\n","source":"_posts/2018-08-14-celery_first.md","raw":"---\nlayout: default\ntitle: celery_first 官网基础入门教程\ndate:   2018-08-14 16:16:01 \ncategories: python\n---\n# celery_first 最小实验\n## 概述\ncelery 将工作进行分解为：\n\n函数，调用函数，结果容器，函数结果\n\n1. 初始化函数准备工作\n2. 调用函数立即返回一个结果容器\n3. 函数接收任务开始工作，抛出函数结果\n4. 函数结果去填充到结果容器\n\n## 工作者\n\n工作者示例代码\ntasks.py\n~~~python\nfrom celery import Celery\n\napp = Celery('tasks', broker='pyamqp://guest@192.168.146.129//', backend='redis://192.168.146.129')\n\n\n@app.task\ndef add(x, y):\n    # 占时间12秒\n    for i in range(123456):\n        a = 999 ** 999\n        del a\n    return x + y\n~~~\n\n工作者流程\n1. 准备工作，监听消息队列，获取任务安排\n2. 取到任务马上工作，工作完成写入到后端。（工作者是否并发待测试） \n\n启动工作者\ncelery -A your_app_name worker --pool=solo -l info\nwindows下使用报错解决方案\ncelery -A your_app_name worker --pool=solo -l info\n\n## 安排工作者进行工作\n\n调用工作者执行任务流程\n1. 导入工作者的任务方法\n2. 执行任务方法\n3. 立即返回一个异步结果，包含该执行任务的id\n4. 异步结果包含任务结果，初始状态为空，工作者完成工作后自动取得任务结果\n\n**内存假想**\n\n立即返回的结果指向一块内存区间，内存区间有一部分初始状态。\n当工作者任务结束会把结果数据写到该内存区间\n\n\n\n调用工作者示例代码\ntasks.py（续）\n~~~python\nimport time\ndef test_run():\n    r1 = add.delay(10, 1)\n    r2 = add.delay(10, 2)\n    i = 1\n    while 1:\n        print('第%s秒' % i, r1.result, r2.result)\n        if r1.result and r2.result:\n            break\n        time.sleep(1)\n        i += 1\n~~~\n\n调用工作者方法\n1. pycharm 运行 tasks.py文件，勾选 Run with Python console\n2. test_run()\n","slug":"celery_first","published":1,"updated":"2023-01-16T04:59:12.332Z","comments":1,"photos":[],"link":"","_id":"clcyhkuzu0000dz2t0jbq2rpp","content":"<h1 id=\"celery-first-最小实验\"><a href=\"#celery-first-最小实验\" class=\"headerlink\" title=\"celery_first 最小实验\"></a>celery_first 最小实验</h1><h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>celery 将工作进行分解为：</p>\n<p>函数，调用函数，结果容器，函数结果</p>\n<ol>\n<li>初始化函数准备工作</li>\n<li>调用函数立即返回一个结果容器</li>\n<li>函数接收任务开始工作，抛出函数结果</li>\n<li>函数结果去填充到结果容器</li>\n</ol>\n<h2 id=\"工作者\"><a href=\"#工作者\" class=\"headerlink\" title=\"工作者\"></a>工作者</h2><p>工作者示例代码<br>tasks.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> celery <span class=\"keyword\">import</span> Celery</span><br><span class=\"line\"></span><br><span class=\"line\">app = Celery(<span class=\"string\">&#x27;tasks&#x27;</span>, broker=<span class=\"string\">&#x27;pyamqp://guest@192.168.146.129//&#x27;</span>, backend=<span class=\"string\">&#x27;redis://192.168.146.129&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.task</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add</span>(<span class=\"params\">x, y</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 占时间12秒</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">123456</span>):</span><br><span class=\"line\">        a = <span class=\"number\">999</span> ** <span class=\"number\">999</span></span><br><span class=\"line\">        <span class=\"keyword\">del</span> a</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y</span><br></pre></td></tr></table></figure>\n\n<p>工作者流程</p>\n<ol>\n<li>准备工作，监听消息队列，获取任务安排</li>\n<li>取到任务马上工作，工作完成写入到后端。（工作者是否并发待测试） </li>\n</ol>\n<p>启动工作者<br>celery -A your_app_name worker –pool=solo -l info<br>windows下使用报错解决方案<br>celery -A your_app_name worker –pool=solo -l info</p>\n<h2 id=\"安排工作者进行工作\"><a href=\"#安排工作者进行工作\" class=\"headerlink\" title=\"安排工作者进行工作\"></a>安排工作者进行工作</h2><p>调用工作者执行任务流程</p>\n<ol>\n<li>导入工作者的任务方法</li>\n<li>执行任务方法</li>\n<li>立即返回一个异步结果，包含该执行任务的id</li>\n<li>异步结果包含任务结果，初始状态为空，工作者完成工作后自动取得任务结果</li>\n</ol>\n<p><strong>内存假想</strong></p>\n<p>立即返回的结果指向一块内存区间，内存区间有一部分初始状态。<br>当工作者任务结束会把结果数据写到该内存区间</p>\n<p>调用工作者示例代码<br>tasks.py（续）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_run</span>():</span><br><span class=\"line\">    r1 = add.delay(<span class=\"number\">10</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">    r2 = add.delay(<span class=\"number\">10</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">    i = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;第%s秒&#x27;</span> % i, r1.result, r2.result)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> r1.result <span class=\"keyword\">and</span> r2.result:</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\">        i += <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>调用工作者方法</p>\n<ol>\n<li>pycharm 运行 tasks.py文件，勾选 Run with Python console</li>\n<li>test_run()</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"celery-first-最小实验\"><a href=\"#celery-first-最小实验\" class=\"headerlink\" title=\"celery_first 最小实验\"></a>celery_first 最小实验</h1><h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>celery 将工作进行分解为：</p>\n<p>函数，调用函数，结果容器，函数结果</p>\n<ol>\n<li>初始化函数准备工作</li>\n<li>调用函数立即返回一个结果容器</li>\n<li>函数接收任务开始工作，抛出函数结果</li>\n<li>函数结果去填充到结果容器</li>\n</ol>\n<h2 id=\"工作者\"><a href=\"#工作者\" class=\"headerlink\" title=\"工作者\"></a>工作者</h2><p>工作者示例代码<br>tasks.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> celery <span class=\"keyword\">import</span> Celery</span><br><span class=\"line\"></span><br><span class=\"line\">app = Celery(<span class=\"string\">&#x27;tasks&#x27;</span>, broker=<span class=\"string\">&#x27;pyamqp://guest@192.168.146.129//&#x27;</span>, backend=<span class=\"string\">&#x27;redis://192.168.146.129&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.task</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add</span>(<span class=\"params\">x, y</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 占时间12秒</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">123456</span>):</span><br><span class=\"line\">        a = <span class=\"number\">999</span> ** <span class=\"number\">999</span></span><br><span class=\"line\">        <span class=\"keyword\">del</span> a</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y</span><br></pre></td></tr></table></figure>\n\n<p>工作者流程</p>\n<ol>\n<li>准备工作，监听消息队列，获取任务安排</li>\n<li>取到任务马上工作，工作完成写入到后端。（工作者是否并发待测试） </li>\n</ol>\n<p>启动工作者<br>celery -A your_app_name worker –pool=solo -l info<br>windows下使用报错解决方案<br>celery -A your_app_name worker –pool=solo -l info</p>\n<h2 id=\"安排工作者进行工作\"><a href=\"#安排工作者进行工作\" class=\"headerlink\" title=\"安排工作者进行工作\"></a>安排工作者进行工作</h2><p>调用工作者执行任务流程</p>\n<ol>\n<li>导入工作者的任务方法</li>\n<li>执行任务方法</li>\n<li>立即返回一个异步结果，包含该执行任务的id</li>\n<li>异步结果包含任务结果，初始状态为空，工作者完成工作后自动取得任务结果</li>\n</ol>\n<p><strong>内存假想</strong></p>\n<p>立即返回的结果指向一块内存区间，内存区间有一部分初始状态。<br>当工作者任务结束会把结果数据写到该内存区间</p>\n<p>调用工作者示例代码<br>tasks.py（续）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_run</span>():</span><br><span class=\"line\">    r1 = add.delay(<span class=\"number\">10</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">    r2 = add.delay(<span class=\"number\">10</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">    i = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;第%s秒&#x27;</span> % i, r1.result, r2.result)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> r1.result <span class=\"keyword\">and</span> r2.result:</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\">        i += <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>调用工作者方法</p>\n<ol>\n<li>pycharm 运行 tasks.py文件，勾选 Run with Python console</li>\n<li>test_run()</li>\n</ol>\n"},{"layout":"default","title":"容器命令大全","date":"2018-08-14T08:16:01.000Z","_content":"# docker 和 docker-compose 安装\ndocker 安装\n\n[docker安装官网文档](https://docs.docker.com/install/linux/docker-ce/ubuntu/)\n~~~\n暂略\n~~~\n\ndocker-compose 安装\n~~~\nsudo curl -L https://github.com/docker/compose/releases/download/1.22.0/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose\nsudo chmod +x /usr/local/bin/docker-compose\ndocker-compose --version\n~~~\n\n# 容器基本命令\n\n### 进入现有容器\n\n代码示例\n\n[参考链接](https://stackoverflow.com/questions/30172605/how-to-get-into-a-docker-container)\n\n~~~sh\n# 打开一个现在正在运行的容器\nsudo docker exec -t -i container_name /bin/bash \n\n# 创建一个现有容器并链接\nsudo docker run --name t1 -it --entrypoint /bin/bash  python #python为镜像名\n\n# Alpine 是专为容器设计的轻量镜像\n# 以Alpine为基础构建的镜像中没有bash\nsudo docker run --rm -it --entrypoint sh python\n~~~\n\n\n### docker-compose 命令\n\ndocker-compose 相关命令需要在含有docker-compose.yaml文件的路径下运行\n~~~\n# 项目创建及更新 -d 后台运行\nsudo docker-compose up -d\n\n# 项目重新构建镜像\nsudo docker-compose up --build\n\n# 运行一次性命令 查看web服务的环境变量\nsudo docker-compose run web env\n\n# 停止服务\nsudo docker-compose stop\n\n# 删除服务及数据卷\nsudo docker-compose down --volumes\n\n# 如果容器已存在则不会重新创建\nsudo docker-compose up -d --no-recreate\n~~~\n\n# 应用篇 \n\n### 使用 docker-compose 进行容器部署\n\n本地环境快速部署 mysql redis rabbitmq\n\ndocker-compose.yaml \n注 3.2才支持使用volumes表达mount bind\n~~~yaml\nversion: '3.2'\nservices:\n  redis:\n    image: \"redis\"\n    restart: always\n    ports:\n    - \"6379:6379\"\n    volumes:\n      - type: bind\n        source: /home/ubuntu/redis-data\n        target: /data\n    environment:\n    - HELLO=hyman\n    command: redis-server --appendonly yes\n\n  mysql:\n    image: \"mysql:5.7\"\n    restart: always\n    ports:\n    - \"3306:3306\"\n    environment:\n    - MYSQL_ROOT_PASSWORD=123456\n\n  rabbitmq:\n    image: \"rabbitmq:3-management\"\n    restart: always\n    ports:\n    - \"5672:5672\"\n    - \"15672:15672\"\n~~~\n\n### redis容器应用\n\n代码示例\n~~~\n# 更换绑定方式（成功） 用iptables 外网访问保证安全\ndocker run -p 6379:6379 --name myredis --restart always --mount type=bind,src=/home/ubuntu/redis-data,dst=/data -d redis redis-server --appendonly yes \n\n~~~\n\n### mysql容器应用\n\n代码示例\n~~~\nsudo docker run --restart always --name my-mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7\n\n~~~\n","source":"_posts/2018-08-14-docker_shell.md","raw":"---\nlayout: default\ntitle: 容器命令大全\ndate:   2018-08-14 16:16:01 \ncategories: docker\n---\n# docker 和 docker-compose 安装\ndocker 安装\n\n[docker安装官网文档](https://docs.docker.com/install/linux/docker-ce/ubuntu/)\n~~~\n暂略\n~~~\n\ndocker-compose 安装\n~~~\nsudo curl -L https://github.com/docker/compose/releases/download/1.22.0/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose\nsudo chmod +x /usr/local/bin/docker-compose\ndocker-compose --version\n~~~\n\n# 容器基本命令\n\n### 进入现有容器\n\n代码示例\n\n[参考链接](https://stackoverflow.com/questions/30172605/how-to-get-into-a-docker-container)\n\n~~~sh\n# 打开一个现在正在运行的容器\nsudo docker exec -t -i container_name /bin/bash \n\n# 创建一个现有容器并链接\nsudo docker run --name t1 -it --entrypoint /bin/bash  python #python为镜像名\n\n# Alpine 是专为容器设计的轻量镜像\n# 以Alpine为基础构建的镜像中没有bash\nsudo docker run --rm -it --entrypoint sh python\n~~~\n\n\n### docker-compose 命令\n\ndocker-compose 相关命令需要在含有docker-compose.yaml文件的路径下运行\n~~~\n# 项目创建及更新 -d 后台运行\nsudo docker-compose up -d\n\n# 项目重新构建镜像\nsudo docker-compose up --build\n\n# 运行一次性命令 查看web服务的环境变量\nsudo docker-compose run web env\n\n# 停止服务\nsudo docker-compose stop\n\n# 删除服务及数据卷\nsudo docker-compose down --volumes\n\n# 如果容器已存在则不会重新创建\nsudo docker-compose up -d --no-recreate\n~~~\n\n# 应用篇 \n\n### 使用 docker-compose 进行容器部署\n\n本地环境快速部署 mysql redis rabbitmq\n\ndocker-compose.yaml \n注 3.2才支持使用volumes表达mount bind\n~~~yaml\nversion: '3.2'\nservices:\n  redis:\n    image: \"redis\"\n    restart: always\n    ports:\n    - \"6379:6379\"\n    volumes:\n      - type: bind\n        source: /home/ubuntu/redis-data\n        target: /data\n    environment:\n    - HELLO=hyman\n    command: redis-server --appendonly yes\n\n  mysql:\n    image: \"mysql:5.7\"\n    restart: always\n    ports:\n    - \"3306:3306\"\n    environment:\n    - MYSQL_ROOT_PASSWORD=123456\n\n  rabbitmq:\n    image: \"rabbitmq:3-management\"\n    restart: always\n    ports:\n    - \"5672:5672\"\n    - \"15672:15672\"\n~~~\n\n### redis容器应用\n\n代码示例\n~~~\n# 更换绑定方式（成功） 用iptables 外网访问保证安全\ndocker run -p 6379:6379 --name myredis --restart always --mount type=bind,src=/home/ubuntu/redis-data,dst=/data -d redis redis-server --appendonly yes \n\n~~~\n\n### mysql容器应用\n\n代码示例\n~~~\nsudo docker run --restart always --name my-mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7\n\n~~~\n","slug":"docker_shell","published":1,"updated":"2023-01-16T04:59:12.332Z","comments":1,"photos":[],"link":"","_id":"clcyhkuzz0001dz2t4v0r5gir","content":"<h1 id=\"docker-和-docker-compose-安装\"><a href=\"#docker-和-docker-compose-安装\" class=\"headerlink\" title=\"docker 和 docker-compose 安装\"></a>docker 和 docker-compose 安装</h1><p>docker 安装</p>\n<p><a href=\"https://docs.docker.com/install/linux/docker-ce/ubuntu/\">docker安装官网文档</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">暂略</span><br></pre></td></tr></table></figure>\n\n<p>docker-compose 安装</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo curl -L https://github.com/docker/compose/releases/download/1.22.0/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose</span><br><span class=\"line\">sudo chmod +x /usr/local/bin/docker-compose</span><br><span class=\"line\">docker-compose --version</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"容器基本命令\"><a href=\"#容器基本命令\" class=\"headerlink\" title=\"容器基本命令\"></a>容器基本命令</h1><h3 id=\"进入现有容器\"><a href=\"#进入现有容器\" class=\"headerlink\" title=\"进入现有容器\"></a>进入现有容器</h3><p>代码示例</p>\n<p><a href=\"https://stackoverflow.com/questions/30172605/how-to-get-into-a-docker-container\">参考链接</a></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 打开一个现在正在运行的容器</span></span><br><span class=\"line\">sudo docker <span class=\"built_in\">exec</span> -t -i container_name /bin/bash </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建一个现有容器并链接</span></span><br><span class=\"line\">sudo docker run --name t1 -it --entrypoint /bin/bash  python <span class=\"comment\">#python为镜像名</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Alpine 是专为容器设计的轻量镜像</span></span><br><span class=\"line\"><span class=\"comment\"># 以Alpine为基础构建的镜像中没有bash</span></span><br><span class=\"line\">sudo docker run --<span class=\"built_in\">rm</span> -it --entrypoint sh python</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"docker-compose-命令\"><a href=\"#docker-compose-命令\" class=\"headerlink\" title=\"docker-compose 命令\"></a>docker-compose 命令</h3><p>docker-compose 相关命令需要在含有docker-compose.yaml文件的路径下运行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 项目创建及更新 -d 后台运行</span><br><span class=\"line\">sudo docker-compose up -d</span><br><span class=\"line\"></span><br><span class=\"line\"># 项目重新构建镜像</span><br><span class=\"line\">sudo docker-compose up --build</span><br><span class=\"line\"></span><br><span class=\"line\"># 运行一次性命令 查看web服务的环境变量</span><br><span class=\"line\">sudo docker-compose run web env</span><br><span class=\"line\"></span><br><span class=\"line\"># 停止服务</span><br><span class=\"line\">sudo docker-compose stop</span><br><span class=\"line\"></span><br><span class=\"line\"># 删除服务及数据卷</span><br><span class=\"line\">sudo docker-compose down --volumes</span><br><span class=\"line\"></span><br><span class=\"line\"># 如果容器已存在则不会重新创建</span><br><span class=\"line\">sudo docker-compose up -d --no-recreate</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"应用篇\"><a href=\"#应用篇\" class=\"headerlink\" title=\"应用篇\"></a>应用篇</h1><h3 id=\"使用-docker-compose-进行容器部署\"><a href=\"#使用-docker-compose-进行容器部署\" class=\"headerlink\" title=\"使用 docker-compose 进行容器部署\"></a>使用 docker-compose 进行容器部署</h3><p>本地环境快速部署 mysql redis rabbitmq</p>\n<p>docker-compose.yaml<br>注 3.2才支持使用volumes表达mount bind</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&#x27;3.2&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">redis:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">&quot;redis&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&quot;6379:6379&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">type:</span> <span class=\"string\">bind</span></span><br><span class=\"line\">        <span class=\"attr\">source:</span> <span class=\"string\">/home/ubuntu/redis-data</span></span><br><span class=\"line\">        <span class=\"attr\">target:</span> <span class=\"string\">/data</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">HELLO=hyman</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span> <span class=\"string\">redis-server</span> <span class=\"string\">--appendonly</span> <span class=\"literal\">yes</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">mysql:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">&quot;mysql:5.7&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&quot;3306:3306&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">MYSQL_ROOT_PASSWORD=123456</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">rabbitmq:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">&quot;rabbitmq:3-management&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&quot;5672:5672&quot;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&quot;15672:15672&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"redis容器应用\"><a href=\"#redis容器应用\" class=\"headerlink\" title=\"redis容器应用\"></a>redis容器应用</h3><p>代码示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 更换绑定方式（成功） 用iptables 外网访问保证安全</span><br><span class=\"line\">docker run -p 6379:6379 --name myredis --restart always --mount type=bind,src=/home/ubuntu/redis-data,dst=/data -d redis redis-server --appendonly yes </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"mysql容器应用\"><a href=\"#mysql容器应用\" class=\"headerlink\" title=\"mysql容器应用\"></a>mysql容器应用</h3><p>代码示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker run --restart always --name my-mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"docker-和-docker-compose-安装\"><a href=\"#docker-和-docker-compose-安装\" class=\"headerlink\" title=\"docker 和 docker-compose 安装\"></a>docker 和 docker-compose 安装</h1><p>docker 安装</p>\n<p><a href=\"https://docs.docker.com/install/linux/docker-ce/ubuntu/\">docker安装官网文档</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">暂略</span><br></pre></td></tr></table></figure>\n\n<p>docker-compose 安装</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo curl -L https://github.com/docker/compose/releases/download/1.22.0/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose</span><br><span class=\"line\">sudo chmod +x /usr/local/bin/docker-compose</span><br><span class=\"line\">docker-compose --version</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"容器基本命令\"><a href=\"#容器基本命令\" class=\"headerlink\" title=\"容器基本命令\"></a>容器基本命令</h1><h3 id=\"进入现有容器\"><a href=\"#进入现有容器\" class=\"headerlink\" title=\"进入现有容器\"></a>进入现有容器</h3><p>代码示例</p>\n<p><a href=\"https://stackoverflow.com/questions/30172605/how-to-get-into-a-docker-container\">参考链接</a></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 打开一个现在正在运行的容器</span></span><br><span class=\"line\">sudo docker <span class=\"built_in\">exec</span> -t -i container_name /bin/bash </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建一个现有容器并链接</span></span><br><span class=\"line\">sudo docker run --name t1 -it --entrypoint /bin/bash  python <span class=\"comment\">#python为镜像名</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Alpine 是专为容器设计的轻量镜像</span></span><br><span class=\"line\"><span class=\"comment\"># 以Alpine为基础构建的镜像中没有bash</span></span><br><span class=\"line\">sudo docker run --<span class=\"built_in\">rm</span> -it --entrypoint sh python</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"docker-compose-命令\"><a href=\"#docker-compose-命令\" class=\"headerlink\" title=\"docker-compose 命令\"></a>docker-compose 命令</h3><p>docker-compose 相关命令需要在含有docker-compose.yaml文件的路径下运行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 项目创建及更新 -d 后台运行</span><br><span class=\"line\">sudo docker-compose up -d</span><br><span class=\"line\"></span><br><span class=\"line\"># 项目重新构建镜像</span><br><span class=\"line\">sudo docker-compose up --build</span><br><span class=\"line\"></span><br><span class=\"line\"># 运行一次性命令 查看web服务的环境变量</span><br><span class=\"line\">sudo docker-compose run web env</span><br><span class=\"line\"></span><br><span class=\"line\"># 停止服务</span><br><span class=\"line\">sudo docker-compose stop</span><br><span class=\"line\"></span><br><span class=\"line\"># 删除服务及数据卷</span><br><span class=\"line\">sudo docker-compose down --volumes</span><br><span class=\"line\"></span><br><span class=\"line\"># 如果容器已存在则不会重新创建</span><br><span class=\"line\">sudo docker-compose up -d --no-recreate</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"应用篇\"><a href=\"#应用篇\" class=\"headerlink\" title=\"应用篇\"></a>应用篇</h1><h3 id=\"使用-docker-compose-进行容器部署\"><a href=\"#使用-docker-compose-进行容器部署\" class=\"headerlink\" title=\"使用 docker-compose 进行容器部署\"></a>使用 docker-compose 进行容器部署</h3><p>本地环境快速部署 mysql redis rabbitmq</p>\n<p>docker-compose.yaml<br>注 3.2才支持使用volumes表达mount bind</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&#x27;3.2&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">redis:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">&quot;redis&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&quot;6379:6379&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">type:</span> <span class=\"string\">bind</span></span><br><span class=\"line\">        <span class=\"attr\">source:</span> <span class=\"string\">/home/ubuntu/redis-data</span></span><br><span class=\"line\">        <span class=\"attr\">target:</span> <span class=\"string\">/data</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">HELLO=hyman</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span> <span class=\"string\">redis-server</span> <span class=\"string\">--appendonly</span> <span class=\"literal\">yes</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">mysql:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">&quot;mysql:5.7&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&quot;3306:3306&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">MYSQL_ROOT_PASSWORD=123456</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">rabbitmq:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">&quot;rabbitmq:3-management&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&quot;5672:5672&quot;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&quot;15672:15672&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"redis容器应用\"><a href=\"#redis容器应用\" class=\"headerlink\" title=\"redis容器应用\"></a>redis容器应用</h3><p>代码示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 更换绑定方式（成功） 用iptables 外网访问保证安全</span><br><span class=\"line\">docker run -p 6379:6379 --name myredis --restart always --mount type=bind,src=/home/ubuntu/redis-data,dst=/data -d redis redis-server --appendonly yes </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"mysql容器应用\"><a href=\"#mysql容器应用\" class=\"headerlink\" title=\"mysql容器应用\"></a>mysql容器应用</h3><p>代码示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker run --restart always --name my-mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"title":"VurPress 快速开始","date":"2022-10-28T16:00:00.000Z","author":"eleksbai","location":"Hangzhou","_content":" \n\n## 基础环境 nodejs 环境搭建\n\n在ubuntu20.04下搭建vuepress开发环境.\n\n```shell\n# 系统 ubuntu 20.04\nsudo apt install nodejs\nsudo apt install npm\ncnpm install -g vuepress\n```\n\nhyman@hyman-MS-7A37:~$ node -v\nv10.19.0\nhyman@hyman-MS-7A37:~$ npm -v\n6.14.4\n\n#### cnpm 包\n\n```shell\nsudo npm install -g cnpm --registry=https://registry.npmmirror.com\ncnpm install --global yarn\nsudo ln -s /opt/programs/nodejs/node-v16.17.1-linux-x64/bin/yarn /usr/local/bin/yarn\nyarn config set registry https://registry.npmmirror.com\n```\n\n淘宝npm启用新域名了\nhttps://developer.aliyun.com/article/801032\n\n包管理还是应该使用yarn， 不然很可能使用的时候部署不起来\n\n## 配置 docs/.vuepress/config.js\n\n教程1中建议对配置进行切分， 我这里建议不需要。\n这种东西等需要再去搞，而且大多数人等不要需要的哪个时候。\n早期阶段保持简单即可。\n\n## 插件安装\n\n```shell\ncnpm install @vuepress/plugin-back-to-top\ncnpm install @vuepress/plugin-pwa\n```\n\n## 评论系统 vssue\n\n[码云配置](https://vssue.js.org/guide/gitee.html)\n[vuepress 配置](https://vssue.js.org/guide/vuepress.html#vuepress-plugin)\n[评论系统demo](https://gitee.com/meteor_lxy/vssue-demo)\n[码云第三方应用文档](https://gitee.com/api/v5/oauth_doc#/)\n结合码云试试看， 不行以后切成gitee\n\n```\ncnpm install @vssue/vuepress-plugin-vssue\ncnpm install @vssue/api-gitee-v5\n\n# secret_example.js\n\n```\n\n配置平台密钥\nsecret.js\n\n```js\nconst vssue_gitee ={\n    platform: 'gitee',\n    // all other options of Vssue are allowed\n    owner: 'eleksbai', // 码云的用户名\n    repo: 'blog', // 码云的仓库名\n    clientId: 'YOUR_CLIENT_ID',\n    clientSecret: 'YOUR_CLIENT_SECRET',\n}\nmodule.exports = {\n    \"vssue\": vssue_gitee\n}\n```\n\n在配置文件中引入\ndocs/.vuepress/config.js\n\n```js\nconst secret =  require(\"./secret\");\nconst vssue = secret.vssue\nmodule.exports = { \n    // ....\n    plugins:\n        {\n            '@vssue/vuepress-plugin-vssue': {\n                // set `platform` rather than `api`\n                platform: vssue.platform,\n                owner: vssue.owner,\n                repo: vssue.repo,\n                clientId: vssue.clientId,\n                clientSecret: vssue.clientSecret,\n            },\n            '@vuepress/back-to-top':{}\n        },\n    // ...\n}\n```\n\n## 自动侧边栏\n\n方便管理文章\n[Vuepress Plugin Auto Sidebar](https://shanyuhai123.github.io/vuepress-plugin-auto-sidebar/zh/)\n\n```shell\nyarn add -D  vuepress-plugin-auto-sidebar\n```\n\n## 参考\n\n1. [一个比较详细的建站过程（看到一半需要关注公众号才可以继续）](https://coder.itclan.cn/fontend/tools/vuepress-build-blog/#%E5%B1%95%E7%A4%BA%E6%AF%8F%E4%B8%AA%E9%A1%B5%E9%9D%A2%E7%9A%84%E4%BE%A7%E8%BE%B9%E6%A0%8F)\n2. [官方文档中文版](https://www.vuepress.cn/guide/) \n\n","source":"_posts/2022-10-29-vuepress-quick-start.md","raw":"---\ntitle: VurPress 快速开始\ndate: 2022-10-29\nauthor: eleksbai\ntags:\n - vuepress\nlocation: Hangzhou\n--- \n\n## 基础环境 nodejs 环境搭建\n\n在ubuntu20.04下搭建vuepress开发环境.\n\n```shell\n# 系统 ubuntu 20.04\nsudo apt install nodejs\nsudo apt install npm\ncnpm install -g vuepress\n```\n\nhyman@hyman-MS-7A37:~$ node -v\nv10.19.0\nhyman@hyman-MS-7A37:~$ npm -v\n6.14.4\n\n#### cnpm 包\n\n```shell\nsudo npm install -g cnpm --registry=https://registry.npmmirror.com\ncnpm install --global yarn\nsudo ln -s /opt/programs/nodejs/node-v16.17.1-linux-x64/bin/yarn /usr/local/bin/yarn\nyarn config set registry https://registry.npmmirror.com\n```\n\n淘宝npm启用新域名了\nhttps://developer.aliyun.com/article/801032\n\n包管理还是应该使用yarn， 不然很可能使用的时候部署不起来\n\n## 配置 docs/.vuepress/config.js\n\n教程1中建议对配置进行切分， 我这里建议不需要。\n这种东西等需要再去搞，而且大多数人等不要需要的哪个时候。\n早期阶段保持简单即可。\n\n## 插件安装\n\n```shell\ncnpm install @vuepress/plugin-back-to-top\ncnpm install @vuepress/plugin-pwa\n```\n\n## 评论系统 vssue\n\n[码云配置](https://vssue.js.org/guide/gitee.html)\n[vuepress 配置](https://vssue.js.org/guide/vuepress.html#vuepress-plugin)\n[评论系统demo](https://gitee.com/meteor_lxy/vssue-demo)\n[码云第三方应用文档](https://gitee.com/api/v5/oauth_doc#/)\n结合码云试试看， 不行以后切成gitee\n\n```\ncnpm install @vssue/vuepress-plugin-vssue\ncnpm install @vssue/api-gitee-v5\n\n# secret_example.js\n\n```\n\n配置平台密钥\nsecret.js\n\n```js\nconst vssue_gitee ={\n    platform: 'gitee',\n    // all other options of Vssue are allowed\n    owner: 'eleksbai', // 码云的用户名\n    repo: 'blog', // 码云的仓库名\n    clientId: 'YOUR_CLIENT_ID',\n    clientSecret: 'YOUR_CLIENT_SECRET',\n}\nmodule.exports = {\n    \"vssue\": vssue_gitee\n}\n```\n\n在配置文件中引入\ndocs/.vuepress/config.js\n\n```js\nconst secret =  require(\"./secret\");\nconst vssue = secret.vssue\nmodule.exports = { \n    // ....\n    plugins:\n        {\n            '@vssue/vuepress-plugin-vssue': {\n                // set `platform` rather than `api`\n                platform: vssue.platform,\n                owner: vssue.owner,\n                repo: vssue.repo,\n                clientId: vssue.clientId,\n                clientSecret: vssue.clientSecret,\n            },\n            '@vuepress/back-to-top':{}\n        },\n    // ...\n}\n```\n\n## 自动侧边栏\n\n方便管理文章\n[Vuepress Plugin Auto Sidebar](https://shanyuhai123.github.io/vuepress-plugin-auto-sidebar/zh/)\n\n```shell\nyarn add -D  vuepress-plugin-auto-sidebar\n```\n\n## 参考\n\n1. [一个比较详细的建站过程（看到一半需要关注公众号才可以继续）](https://coder.itclan.cn/fontend/tools/vuepress-build-blog/#%E5%B1%95%E7%A4%BA%E6%AF%8F%E4%B8%AA%E9%A1%B5%E9%9D%A2%E7%9A%84%E4%BE%A7%E8%BE%B9%E6%A0%8F)\n2. [官方文档中文版](https://www.vuepress.cn/guide/) \n\n","slug":"vuepress-quick-start","published":1,"updated":"2023-01-16T04:59:12.332Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcyhkv020003dz2tf1u5hb04","content":"<h2 id=\"基础环境-nodejs-环境搭建\"><a href=\"#基础环境-nodejs-环境搭建\" class=\"headerlink\" title=\"基础环境 nodejs 环境搭建\"></a>基础环境 nodejs 环境搭建</h2><p>在ubuntu20.04下搭建vuepress开发环境.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">系统 ubuntu 20.04</span></span><br><span class=\"line\">sudo apt install nodejs</span><br><span class=\"line\">sudo apt install npm</span><br><span class=\"line\">cnpm install -g vuepress</span><br></pre></td></tr></table></figure>\n\n<p>hyman@hyman-MS-7A37:<del>$ node -v<br>v10.19.0<br>hyman@hyman-MS-7A37:</del>$ npm -v<br>6.14.4</p>\n<h4 id=\"cnpm-包\"><a href=\"#cnpm-包\" class=\"headerlink\" title=\"cnpm 包\"></a>cnpm 包</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo npm install -g cnpm --registry=https://registry.npmmirror.com</span><br><span class=\"line\">cnpm install --global yarn</span><br><span class=\"line\">sudo ln -s /opt/programs/nodejs/node-v16.17.1-linux-x64/bin/yarn /usr/local/bin/yarn</span><br><span class=\"line\">yarn config set registry https://registry.npmmirror.com</span><br></pre></td></tr></table></figure>\n\n<p>淘宝npm启用新域名了<br><a href=\"https://developer.aliyun.com/article/801032\">https://developer.aliyun.com/article/801032</a></p>\n<p>包管理还是应该使用yarn， 不然很可能使用的时候部署不起来</p>\n<h2 id=\"配置-docs-vuepress-config-js\"><a href=\"#配置-docs-vuepress-config-js\" class=\"headerlink\" title=\"配置 docs/.vuepress/config.js\"></a>配置 docs/.vuepress/config.js</h2><p>教程1中建议对配置进行切分， 我这里建议不需要。<br>这种东西等需要再去搞，而且大多数人等不要需要的哪个时候。<br>早期阶段保持简单即可。</p>\n<h2 id=\"插件安装\"><a href=\"#插件安装\" class=\"headerlink\" title=\"插件安装\"></a>插件安装</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install @vuepress/plugin-back-to-top</span><br><span class=\"line\">cnpm install @vuepress/plugin-pwa</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"评论系统-vssue\"><a href=\"#评论系统-vssue\" class=\"headerlink\" title=\"评论系统 vssue\"></a>评论系统 vssue</h2><p><a href=\"https://vssue.js.org/guide/gitee.html\">码云配置</a><br><a href=\"https://vssue.js.org/guide/vuepress.html#vuepress-plugin\">vuepress 配置</a><br><a href=\"https://gitee.com/meteor_lxy/vssue-demo\">评论系统demo</a><br><a href=\"https://gitee.com/api/v5/oauth_doc#/\">码云第三方应用文档</a><br>结合码云试试看， 不行以后切成gitee</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install @vssue/vuepress-plugin-vssue</span><br><span class=\"line\">cnpm install @vssue/api-gitee-v5</span><br><span class=\"line\"></span><br><span class=\"line\"># secret_example.js</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>配置平台密钥<br>secret.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> vssue_gitee =&#123;</span><br><span class=\"line\">    <span class=\"attr\">platform</span>: <span class=\"string\">&#x27;gitee&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// all other options of Vssue are allowed</span></span><br><span class=\"line\">    <span class=\"attr\">owner</span>: <span class=\"string\">&#x27;eleksbai&#x27;</span>, <span class=\"comment\">// 码云的用户名</span></span><br><span class=\"line\">    <span class=\"attr\">repo</span>: <span class=\"string\">&#x27;blog&#x27;</span>, <span class=\"comment\">// 码云的仓库名</span></span><br><span class=\"line\">    <span class=\"attr\">clientId</span>: <span class=\"string\">&#x27;YOUR_CLIENT_ID&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">clientSecret</span>: <span class=\"string\">&#x27;YOUR_CLIENT_SECRET&#x27;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;vssue&quot;</span>: vssue_gitee</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在配置文件中引入<br>docs/.vuepress/config.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> secret =  <span class=\"built_in\">require</span>(<span class=\"string\">&quot;./secret&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> vssue = secret.<span class=\"property\">vssue</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123; </span><br><span class=\"line\">    <span class=\"comment\">// ....</span></span><br><span class=\"line\">    <span class=\"attr\">plugins</span>:</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"string\">&#x27;@vssue/vuepress-plugin-vssue&#x27;</span>: &#123;</span><br><span class=\"line\">                <span class=\"comment\">// set `platform` rather than `api`</span></span><br><span class=\"line\">                <span class=\"attr\">platform</span>: vssue.<span class=\"property\">platform</span>,</span><br><span class=\"line\">                <span class=\"attr\">owner</span>: vssue.<span class=\"property\">owner</span>,</span><br><span class=\"line\">                <span class=\"attr\">repo</span>: vssue.<span class=\"property\">repo</span>,</span><br><span class=\"line\">                <span class=\"attr\">clientId</span>: vssue.<span class=\"property\">clientId</span>,</span><br><span class=\"line\">                <span class=\"attr\">clientSecret</span>: vssue.<span class=\"property\">clientSecret</span>,</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"string\">&#x27;@vuepress/back-to-top&#x27;</span>:&#123;&#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"自动侧边栏\"><a href=\"#自动侧边栏\" class=\"headerlink\" title=\"自动侧边栏\"></a>自动侧边栏</h2><p>方便管理文章<br><a href=\"https://shanyuhai123.github.io/vuepress-plugin-auto-sidebar/zh/\">Vuepress Plugin Auto Sidebar</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add -D  vuepress-plugin-auto-sidebar</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ol>\n<li><a href=\"https://coder.itclan.cn/fontend/tools/vuepress-build-blog/#%E5%B1%95%E7%A4%BA%E6%AF%8F%E4%B8%AA%E9%A1%B5%E9%9D%A2%E7%9A%84%E4%BE%A7%E8%BE%B9%E6%A0%8F\">一个比较详细的建站过程（看到一半需要关注公众号才可以继续）</a></li>\n<li><a href=\"https://www.vuepress.cn/guide/\">官方文档中文版</a> </li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"基础环境-nodejs-环境搭建\"><a href=\"#基础环境-nodejs-环境搭建\" class=\"headerlink\" title=\"基础环境 nodejs 环境搭建\"></a>基础环境 nodejs 环境搭建</h2><p>在ubuntu20.04下搭建vuepress开发环境.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">系统 ubuntu 20.04</span></span><br><span class=\"line\">sudo apt install nodejs</span><br><span class=\"line\">sudo apt install npm</span><br><span class=\"line\">cnpm install -g vuepress</span><br></pre></td></tr></table></figure>\n\n<p>hyman@hyman-MS-7A37:<del>$ node -v<br>v10.19.0<br>hyman@hyman-MS-7A37:</del>$ npm -v<br>6.14.4</p>\n<h4 id=\"cnpm-包\"><a href=\"#cnpm-包\" class=\"headerlink\" title=\"cnpm 包\"></a>cnpm 包</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo npm install -g cnpm --registry=https://registry.npmmirror.com</span><br><span class=\"line\">cnpm install --global yarn</span><br><span class=\"line\">sudo ln -s /opt/programs/nodejs/node-v16.17.1-linux-x64/bin/yarn /usr/local/bin/yarn</span><br><span class=\"line\">yarn config set registry https://registry.npmmirror.com</span><br></pre></td></tr></table></figure>\n\n<p>淘宝npm启用新域名了<br><a href=\"https://developer.aliyun.com/article/801032\">https://developer.aliyun.com/article/801032</a></p>\n<p>包管理还是应该使用yarn， 不然很可能使用的时候部署不起来</p>\n<h2 id=\"配置-docs-vuepress-config-js\"><a href=\"#配置-docs-vuepress-config-js\" class=\"headerlink\" title=\"配置 docs/.vuepress/config.js\"></a>配置 docs/.vuepress/config.js</h2><p>教程1中建议对配置进行切分， 我这里建议不需要。<br>这种东西等需要再去搞，而且大多数人等不要需要的哪个时候。<br>早期阶段保持简单即可。</p>\n<h2 id=\"插件安装\"><a href=\"#插件安装\" class=\"headerlink\" title=\"插件安装\"></a>插件安装</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install @vuepress/plugin-back-to-top</span><br><span class=\"line\">cnpm install @vuepress/plugin-pwa</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"评论系统-vssue\"><a href=\"#评论系统-vssue\" class=\"headerlink\" title=\"评论系统 vssue\"></a>评论系统 vssue</h2><p><a href=\"https://vssue.js.org/guide/gitee.html\">码云配置</a><br><a href=\"https://vssue.js.org/guide/vuepress.html#vuepress-plugin\">vuepress 配置</a><br><a href=\"https://gitee.com/meteor_lxy/vssue-demo\">评论系统demo</a><br><a href=\"https://gitee.com/api/v5/oauth_doc#/\">码云第三方应用文档</a><br>结合码云试试看， 不行以后切成gitee</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install @vssue/vuepress-plugin-vssue</span><br><span class=\"line\">cnpm install @vssue/api-gitee-v5</span><br><span class=\"line\"></span><br><span class=\"line\"># secret_example.js</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>配置平台密钥<br>secret.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> vssue_gitee =&#123;</span><br><span class=\"line\">    <span class=\"attr\">platform</span>: <span class=\"string\">&#x27;gitee&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// all other options of Vssue are allowed</span></span><br><span class=\"line\">    <span class=\"attr\">owner</span>: <span class=\"string\">&#x27;eleksbai&#x27;</span>, <span class=\"comment\">// 码云的用户名</span></span><br><span class=\"line\">    <span class=\"attr\">repo</span>: <span class=\"string\">&#x27;blog&#x27;</span>, <span class=\"comment\">// 码云的仓库名</span></span><br><span class=\"line\">    <span class=\"attr\">clientId</span>: <span class=\"string\">&#x27;YOUR_CLIENT_ID&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">clientSecret</span>: <span class=\"string\">&#x27;YOUR_CLIENT_SECRET&#x27;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;vssue&quot;</span>: vssue_gitee</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在配置文件中引入<br>docs/.vuepress/config.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> secret =  <span class=\"built_in\">require</span>(<span class=\"string\">&quot;./secret&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> vssue = secret.<span class=\"property\">vssue</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123; </span><br><span class=\"line\">    <span class=\"comment\">// ....</span></span><br><span class=\"line\">    <span class=\"attr\">plugins</span>:</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"string\">&#x27;@vssue/vuepress-plugin-vssue&#x27;</span>: &#123;</span><br><span class=\"line\">                <span class=\"comment\">// set `platform` rather than `api`</span></span><br><span class=\"line\">                <span class=\"attr\">platform</span>: vssue.<span class=\"property\">platform</span>,</span><br><span class=\"line\">                <span class=\"attr\">owner</span>: vssue.<span class=\"property\">owner</span>,</span><br><span class=\"line\">                <span class=\"attr\">repo</span>: vssue.<span class=\"property\">repo</span>,</span><br><span class=\"line\">                <span class=\"attr\">clientId</span>: vssue.<span class=\"property\">clientId</span>,</span><br><span class=\"line\">                <span class=\"attr\">clientSecret</span>: vssue.<span class=\"property\">clientSecret</span>,</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"string\">&#x27;@vuepress/back-to-top&#x27;</span>:&#123;&#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"自动侧边栏\"><a href=\"#自动侧边栏\" class=\"headerlink\" title=\"自动侧边栏\"></a>自动侧边栏</h2><p>方便管理文章<br><a href=\"https://shanyuhai123.github.io/vuepress-plugin-auto-sidebar/zh/\">Vuepress Plugin Auto Sidebar</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add -D  vuepress-plugin-auto-sidebar</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ol>\n<li><a href=\"https://coder.itclan.cn/fontend/tools/vuepress-build-blog/#%E5%B1%95%E7%A4%BA%E6%AF%8F%E4%B8%AA%E9%A1%B5%E9%9D%A2%E7%9A%84%E4%BE%A7%E8%BE%B9%E6%A0%8F\">一个比较详细的建站过程（看到一半需要关注公众号才可以继续）</a></li>\n<li><a href=\"https://www.vuepress.cn/guide/\">官方文档中文版</a> </li>\n</ol>\n"},{"title":"Hexo 快速开始","date":"2023-01-16T05:21:23.000Z","_content":"\n## 环境\n\n在以下环境中部署:\n系统: ubuntu 20.04\n编辑器: WebStorm\nnode: v16.18.0\nnpm: v8.19.2\n\n## 安装\n\n```bash\n# 全局安装hexo-cli 命令行工具\nnpm install -g hexo-cli\n# 当前目录下初始化项目\nhexo init\n```\n\n初始化的目录必须是一个空目录\n\n## 创建新页面\n\n文件名参考jekyll和VuePress的推荐格式, year-month-day-title.\n修改`_config.yml`配置项, 使创建的文件名为上述格式:\n```yaml\n# 设置文件名格式\nnew_post_name: :year-:month-:day-:title.md\n# 启用资源文件夹,方便以后copy, 不启用\n# post_asset_folder: true\n```\n图片资源采用全局文件夹的形式,采用资源文件夹形式,主页上会请求不到资源,需要到具体页面里才能正常显示.\n图片资源目前按年划分,正常应该也不会很多.\n\n```bash\nhexo new \"Hexo quick start\"\n```\n\n然后填写正文内容\n\n## 本地测试\n\n```bash\n# 本地运行服务器\nhexo server\n```\n\n## 一键部署到 github pages\n\n修改`_config.yml`, 使支持一键部署到github\n\n```bash\n# Deployment\n## Docs: https://hexo.io/docs/one-command-deployment\ndeploy:\n  type: 'git'\n  repo: 'git@github.com:eleksbai/eleksbai.github.io.git'\n  branch: gh-pages\n```\n\n执行命令`hexo clean && hexo deploy`部署github上.\n\n调整github项目下的page设置, 是github page显示的内容指向`gh-pages`分支,\nProject(***.github.io) >> Settings >> Pages >> Branch >> gh-pages\n\n## github.io项目从jekyll迁移到hexo\n\n通过以下步骤完成博客框架的迁移:\n\n1. 从github拉取***.io项目.\n2. 在一个项目的目录创建新文件夹, 并初始化hexo项目.\n3. 将***.io项目中_post文件的内容复制到hexo项目source/_posts下\n4. 将***.io项目清空,仅留下.git目录\n5. 将hexo项目内容完成复制到***.io目录下.\n\n## 参考\n\n[Documentation | Hexo](https://hexo.io/docs/)\n","source":"_posts/2023-01-16-Hexo-quick-start.md","raw":"---\ntitle: Hexo 快速开始\ndate: 2023-01-16 13:21:23\ntags:\n- blog\n---\n\n## 环境\n\n在以下环境中部署:\n系统: ubuntu 20.04\n编辑器: WebStorm\nnode: v16.18.0\nnpm: v8.19.2\n\n## 安装\n\n```bash\n# 全局安装hexo-cli 命令行工具\nnpm install -g hexo-cli\n# 当前目录下初始化项目\nhexo init\n```\n\n初始化的目录必须是一个空目录\n\n## 创建新页面\n\n文件名参考jekyll和VuePress的推荐格式, year-month-day-title.\n修改`_config.yml`配置项, 使创建的文件名为上述格式:\n```yaml\n# 设置文件名格式\nnew_post_name: :year-:month-:day-:title.md\n# 启用资源文件夹,方便以后copy, 不启用\n# post_asset_folder: true\n```\n图片资源采用全局文件夹的形式,采用资源文件夹形式,主页上会请求不到资源,需要到具体页面里才能正常显示.\n图片资源目前按年划分,正常应该也不会很多.\n\n```bash\nhexo new \"Hexo quick start\"\n```\n\n然后填写正文内容\n\n## 本地测试\n\n```bash\n# 本地运行服务器\nhexo server\n```\n\n## 一键部署到 github pages\n\n修改`_config.yml`, 使支持一键部署到github\n\n```bash\n# Deployment\n## Docs: https://hexo.io/docs/one-command-deployment\ndeploy:\n  type: 'git'\n  repo: 'git@github.com:eleksbai/eleksbai.github.io.git'\n  branch: gh-pages\n```\n\n执行命令`hexo clean && hexo deploy`部署github上.\n\n调整github项目下的page设置, 是github page显示的内容指向`gh-pages`分支,\nProject(***.github.io) >> Settings >> Pages >> Branch >> gh-pages\n\n## github.io项目从jekyll迁移到hexo\n\n通过以下步骤完成博客框架的迁移:\n\n1. 从github拉取***.io项目.\n2. 在一个项目的目录创建新文件夹, 并初始化hexo项目.\n3. 将***.io项目中_post文件的内容复制到hexo项目source/_posts下\n4. 将***.io项目清空,仅留下.git目录\n5. 将hexo项目内容完成复制到***.io目录下.\n\n## 参考\n\n[Documentation | Hexo](https://hexo.io/docs/)\n","slug":"Hexo-quick-start","published":1,"updated":"2023-01-16T07:29:22.972Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcyhkv030004dz2te4828orz","content":"<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><p>在以下环境中部署:<br>系统: ubuntu 20.04<br>编辑器: WebStorm<br>node: v16.18.0<br>npm: v8.19.2</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 全局安装hexo-cli 命令行工具</span></span><br><span class=\"line\">npm install -g hexo-cli</span><br><span class=\"line\"><span class=\"comment\"># 当前目录下初始化项目</span></span><br><span class=\"line\">hexo init</span><br></pre></td></tr></table></figure>\n\n<p>初始化的目录必须是一个空目录</p>\n<h2 id=\"创建新页面\"><a href=\"#创建新页面\" class=\"headerlink\" title=\"创建新页面\"></a>创建新页面</h2><p>文件名参考jekyll和VuePress的推荐格式, year-month-day-title.<br>修改<code>_config.yml</code>配置项, 使创建的文件名为上述格式:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 设置文件名格式</span></span><br><span class=\"line\"><span class=\"attr\">new_post_name:</span> <span class=\"string\">:year-:month-:day-:title.md</span></span><br><span class=\"line\"><span class=\"comment\"># 启用资源文件夹,方便以后copy, 不启用</span></span><br><span class=\"line\"><span class=\"comment\"># post_asset_folder: true</span></span><br></pre></td></tr></table></figure>\n<p>图片资源采用全局文件夹的形式,采用资源文件夹形式,主页上会请求不到资源,需要到具体页面里才能正常显示.<br>图片资源目前按年划分,正常应该也不会很多.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new <span class=\"string\">&quot;Hexo quick start&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后填写正文内容</p>\n<h2 id=\"本地测试\"><a href=\"#本地测试\" class=\"headerlink\" title=\"本地测试\"></a>本地测试</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 本地运行服务器</span></span><br><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"一键部署到-github-pages\"><a href=\"#一键部署到-github-pages\" class=\"headerlink\" title=\"一键部署到 github pages\"></a>一键部署到 github pages</h2><p>修改<code>_config.yml</code>, 使支持一键部署到github</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Deployment</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: <span class=\"string\">&#x27;git&#x27;</span></span><br><span class=\"line\">  repo: <span class=\"string\">&#x27;git@github.com:eleksbai/eleksbai.github.io.git&#x27;</span></span><br><span class=\"line\">  branch: gh-pages</span><br></pre></td></tr></table></figure>\n\n<p>执行命令<code>hexo clean &amp;&amp; hexo deploy</code>部署github上.</p>\n<p>调整github项目下的page设置, 是github page显示的内容指向<code>gh-pages</code>分支,<br>Project(***.github.io) &gt;&gt; Settings &gt;&gt; Pages &gt;&gt; Branch &gt;&gt; gh-pages</p>\n<h2 id=\"github-io项目从jekyll迁移到hexo\"><a href=\"#github-io项目从jekyll迁移到hexo\" class=\"headerlink\" title=\"github.io项目从jekyll迁移到hexo\"></a>github.io项目从jekyll迁移到hexo</h2><p>通过以下步骤完成博客框架的迁移:</p>\n<ol>\n<li>从github拉取***.io项目.</li>\n<li>在一个项目的目录创建新文件夹, 并初始化hexo项目.</li>\n<li>将***.io项目中_post文件的内容复制到hexo项目source/_posts下</li>\n<li>将***.io项目清空,仅留下.git目录</li>\n<li>将hexo项目内容完成复制到***.io目录下.</li>\n</ol>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://hexo.io/docs/\">Documentation | Hexo</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><p>在以下环境中部署:<br>系统: ubuntu 20.04<br>编辑器: WebStorm<br>node: v16.18.0<br>npm: v8.19.2</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 全局安装hexo-cli 命令行工具</span></span><br><span class=\"line\">npm install -g hexo-cli</span><br><span class=\"line\"><span class=\"comment\"># 当前目录下初始化项目</span></span><br><span class=\"line\">hexo init</span><br></pre></td></tr></table></figure>\n\n<p>初始化的目录必须是一个空目录</p>\n<h2 id=\"创建新页面\"><a href=\"#创建新页面\" class=\"headerlink\" title=\"创建新页面\"></a>创建新页面</h2><p>文件名参考jekyll和VuePress的推荐格式, year-month-day-title.<br>修改<code>_config.yml</code>配置项, 使创建的文件名为上述格式:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 设置文件名格式</span></span><br><span class=\"line\"><span class=\"attr\">new_post_name:</span> <span class=\"string\">:year-:month-:day-:title.md</span></span><br><span class=\"line\"><span class=\"comment\"># 启用资源文件夹,方便以后copy, 不启用</span></span><br><span class=\"line\"><span class=\"comment\"># post_asset_folder: true</span></span><br></pre></td></tr></table></figure>\n<p>图片资源采用全局文件夹的形式,采用资源文件夹形式,主页上会请求不到资源,需要到具体页面里才能正常显示.<br>图片资源目前按年划分,正常应该也不会很多.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new <span class=\"string\">&quot;Hexo quick start&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后填写正文内容</p>\n<h2 id=\"本地测试\"><a href=\"#本地测试\" class=\"headerlink\" title=\"本地测试\"></a>本地测试</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 本地运行服务器</span></span><br><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"一键部署到-github-pages\"><a href=\"#一键部署到-github-pages\" class=\"headerlink\" title=\"一键部署到 github pages\"></a>一键部署到 github pages</h2><p>修改<code>_config.yml</code>, 使支持一键部署到github</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Deployment</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: <span class=\"string\">&#x27;git&#x27;</span></span><br><span class=\"line\">  repo: <span class=\"string\">&#x27;git@github.com:eleksbai/eleksbai.github.io.git&#x27;</span></span><br><span class=\"line\">  branch: gh-pages</span><br></pre></td></tr></table></figure>\n\n<p>执行命令<code>hexo clean &amp;&amp; hexo deploy</code>部署github上.</p>\n<p>调整github项目下的page设置, 是github page显示的内容指向<code>gh-pages</code>分支,<br>Project(***.github.io) &gt;&gt; Settings &gt;&gt; Pages &gt;&gt; Branch &gt;&gt; gh-pages</p>\n<h2 id=\"github-io项目从jekyll迁移到hexo\"><a href=\"#github-io项目从jekyll迁移到hexo\" class=\"headerlink\" title=\"github.io项目从jekyll迁移到hexo\"></a>github.io项目从jekyll迁移到hexo</h2><p>通过以下步骤完成博客框架的迁移:</p>\n<ol>\n<li>从github拉取***.io项目.</li>\n<li>在一个项目的目录创建新文件夹, 并初始化hexo项目.</li>\n<li>将***.io项目中_post文件的内容复制到hexo项目source/_posts下</li>\n<li>将***.io项目清空,仅留下.git目录</li>\n<li>将hexo项目内容完成复制到***.io目录下.</li>\n</ol>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://hexo.io/docs/\">Documentation | Hexo</a></p>\n"},{"title":"vssue gitee 使用教程","date":"2022-11-09T16:00:00.000Z","author":"eleksbai","location":"Hangzhou","_content":" \n\n## 背景\n近期想重新整理一下博客了，作为自己的一些技术积累，方便自己日后翻阅，并且日后如果有了新的感悟可以进行迭代。  \n以前使用Github Pages搞过（实际上只是折腾搭个博客，文档没写几篇，现在这个从历史经验看大概率也是这个下场），\n后来看了小林coding的使用vuepress搭建了个人博客，而且vue个人比较感兴趣所以打算采用vuepress重新整一下博客。\n因为vssue是官方维护的评论插件，所以打算来用它作为评论系统，平台选择gitee即码云（国内的访问方便，现在代码仓库也基本用gitee了）。\n应为这个vssue和gitee配合使用存在问题，才有了这篇文章。（希望作者维护一下， 毕竟我也不会整前端，只能搞个自用的解决方案）\n\n\n### [vuepress](https://vuepress.vuejs.org/zh/)\nVue 驱动的静态网站生成器，类似于[GitHub Pages的jekyll](https://jekyllrb.com/docs/github-pages/)。\n目前了解主要有两种应用，一种是文档， 一种是博客。\n\n### [vssue](https://vssue.js.org/zh/)\nvuepress 官方开发的评论插件，利用git平台的issue功能来实现评论功能。\n目前支持多个平台，包括 GitHub, GitLab, Bitbucket, Gitee 和 Gitea。\n码云的插件为@vssue/api-gitee-v5\n\n### [码云评论插件](https://vssue.js.org/zh/guide/gitee.html)\n码云评论插件需要在码云平台上创建一个第三方应用来使用， 一般用户就可以，不需要使用企业版。\n\n## 问题\n使用vssue+gitee搭的评论系统， 在登录时会提示无效的登录回调地址。\n这是由于码云只支持单个的url地址回调导致的。\n@vssue/api-gitee-v5插件在调用码云接口时采用的回调地址为当前的url地址，如http://localhost:8080/2022/10/29/vuepress-quick-start/  \n而一般码云上配置的应用回调地址为http://localhost:8080/。这两个的url不匹配导致了码云评论插件无法正常使用。\n[官方demo](https://vssue.js.org/zh/demo/gitee.html)也存在这个问题，但是没有维护了。\n![码云接口回调异常](/images/2022/gitee-callback-error.png)\n\n## 解决方法\n1. 请求的回调地址改为码云上配置的回调地址，并缓存当前的页面地址\n2. 码云回调后自动到之前的缓存地址。\n\n### 修改vssue中api-gitee-v5的源码,\n\n1. 增加callbackURL参数, 此参数目前固定为当前的`window.location.protocol + '//' + window.location.host`即默认的主页地址.\n2. 去掉proxy的参数, 当前gitee平台接口已经支持CORS,需要配置代理了.而且vssue默认配置的代理已经无法访问了.\n3. 在向码云平台请求的接口的redirect_uri参数均改为callbackURL.\n4. 在向码云进行应用授权时缓存当前路径的path.使用`sessionStorage.setItem('cacheOriginPath', this.getCurrentPath());`\n\n### 修改博客项目的enhanceApp.js\n因为主页没有评论模块,所以vssue相关代码还没有初始化,无法处理缓存的path.(可能也有办法,但在博客项目改一下也简单)\n如果当前有缓存的path, 则跳转到对应的path路径下.\nenhanceApp.js\n```\n\nfunction getCacheOriginPath() {\n    const cacheOriginPath = sessionStorage.getItem('cacheOriginPath');\n    sessionStorage.setItem('cacheOriginPath', '');\n    console.log(`get cacheOriginPath  ${cacheOriginPath}`);\n    return cacheOriginPath || '';\n}\n\n\nexport default ({\n                    Vue, // the version of Vue being used in the VuePress app\n                    options, // the options for the root Vue instance\n                    router, // the router instance for the app\n                    siteData // site metadata\n                }) => {\n    // ...apply enhancements to the app\n    console.log(\"enhanceApp ...\",)\n    const cacheOriginPath = getCacheOriginPath()\n    if (cacheOriginPath) {\n        console.log(\"change path\", window.location.href, cacheOriginPath)\n        window.location.href = window.location.protocol + '//' + window.location.host + cacheOriginPath + window.location.search;\n    }\n\n\n// http://localhost:8080/2022/10/29/vuepress-quick-start/\n}\n```\n\n\n## 应用\n1. 使用`@vuepress/theme-blog`搭建好博客, 引用`@vssue/api-gitee-v5`码云模块并做相应的配置.\n2. 拉取修改过的vssue项目`git clone  git@gitee.com:eleksbai/vssue.git`\n3. 进入项目根路径安装依赖`cd vssue && yarn install`\n4. 编译码云评论模块 `cd packages/@vssue/api-gitee-v5 && yarn build`\n5. 在码云模块路径下将编译的码云链接到系统`yarn link`\n6. 进入到博客项目, 链接刚刚编译的码云模块`yarn link @vssue/api-gitee-v5`\n7. 运行博客项目测试效果`yarn dev`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/2022-11-10-fix-vssue-for-gitee.md","raw":"---\ntitle: vssue gitee 使用教程\ndate: 2022-11-10\nauthor: eleksbai\ntags:\n - vuepress\nlocation: Hangzhou\n--- \n\n## 背景\n近期想重新整理一下博客了，作为自己的一些技术积累，方便自己日后翻阅，并且日后如果有了新的感悟可以进行迭代。  \n以前使用Github Pages搞过（实际上只是折腾搭个博客，文档没写几篇，现在这个从历史经验看大概率也是这个下场），\n后来看了小林coding的使用vuepress搭建了个人博客，而且vue个人比较感兴趣所以打算采用vuepress重新整一下博客。\n因为vssue是官方维护的评论插件，所以打算来用它作为评论系统，平台选择gitee即码云（国内的访问方便，现在代码仓库也基本用gitee了）。\n应为这个vssue和gitee配合使用存在问题，才有了这篇文章。（希望作者维护一下， 毕竟我也不会整前端，只能搞个自用的解决方案）\n\n\n### [vuepress](https://vuepress.vuejs.org/zh/)\nVue 驱动的静态网站生成器，类似于[GitHub Pages的jekyll](https://jekyllrb.com/docs/github-pages/)。\n目前了解主要有两种应用，一种是文档， 一种是博客。\n\n### [vssue](https://vssue.js.org/zh/)\nvuepress 官方开发的评论插件，利用git平台的issue功能来实现评论功能。\n目前支持多个平台，包括 GitHub, GitLab, Bitbucket, Gitee 和 Gitea。\n码云的插件为@vssue/api-gitee-v5\n\n### [码云评论插件](https://vssue.js.org/zh/guide/gitee.html)\n码云评论插件需要在码云平台上创建一个第三方应用来使用， 一般用户就可以，不需要使用企业版。\n\n## 问题\n使用vssue+gitee搭的评论系统， 在登录时会提示无效的登录回调地址。\n这是由于码云只支持单个的url地址回调导致的。\n@vssue/api-gitee-v5插件在调用码云接口时采用的回调地址为当前的url地址，如http://localhost:8080/2022/10/29/vuepress-quick-start/  \n而一般码云上配置的应用回调地址为http://localhost:8080/。这两个的url不匹配导致了码云评论插件无法正常使用。\n[官方demo](https://vssue.js.org/zh/demo/gitee.html)也存在这个问题，但是没有维护了。\n![码云接口回调异常](/images/2022/gitee-callback-error.png)\n\n## 解决方法\n1. 请求的回调地址改为码云上配置的回调地址，并缓存当前的页面地址\n2. 码云回调后自动到之前的缓存地址。\n\n### 修改vssue中api-gitee-v5的源码,\n\n1. 增加callbackURL参数, 此参数目前固定为当前的`window.location.protocol + '//' + window.location.host`即默认的主页地址.\n2. 去掉proxy的参数, 当前gitee平台接口已经支持CORS,需要配置代理了.而且vssue默认配置的代理已经无法访问了.\n3. 在向码云平台请求的接口的redirect_uri参数均改为callbackURL.\n4. 在向码云进行应用授权时缓存当前路径的path.使用`sessionStorage.setItem('cacheOriginPath', this.getCurrentPath());`\n\n### 修改博客项目的enhanceApp.js\n因为主页没有评论模块,所以vssue相关代码还没有初始化,无法处理缓存的path.(可能也有办法,但在博客项目改一下也简单)\n如果当前有缓存的path, 则跳转到对应的path路径下.\nenhanceApp.js\n```\n\nfunction getCacheOriginPath() {\n    const cacheOriginPath = sessionStorage.getItem('cacheOriginPath');\n    sessionStorage.setItem('cacheOriginPath', '');\n    console.log(`get cacheOriginPath  ${cacheOriginPath}`);\n    return cacheOriginPath || '';\n}\n\n\nexport default ({\n                    Vue, // the version of Vue being used in the VuePress app\n                    options, // the options for the root Vue instance\n                    router, // the router instance for the app\n                    siteData // site metadata\n                }) => {\n    // ...apply enhancements to the app\n    console.log(\"enhanceApp ...\",)\n    const cacheOriginPath = getCacheOriginPath()\n    if (cacheOriginPath) {\n        console.log(\"change path\", window.location.href, cacheOriginPath)\n        window.location.href = window.location.protocol + '//' + window.location.host + cacheOriginPath + window.location.search;\n    }\n\n\n// http://localhost:8080/2022/10/29/vuepress-quick-start/\n}\n```\n\n\n## 应用\n1. 使用`@vuepress/theme-blog`搭建好博客, 引用`@vssue/api-gitee-v5`码云模块并做相应的配置.\n2. 拉取修改过的vssue项目`git clone  git@gitee.com:eleksbai/vssue.git`\n3. 进入项目根路径安装依赖`cd vssue && yarn install`\n4. 编译码云评论模块 `cd packages/@vssue/api-gitee-v5 && yarn build`\n5. 在码云模块路径下将编译的码云链接到系统`yarn link`\n6. 进入到博客项目, 链接刚刚编译的码云模块`yarn link @vssue/api-gitee-v5`\n7. 运行博客项目测试效果`yarn dev`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"fix-vssue-for-gitee","published":1,"updated":"2023-01-16T07:20:41.660Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcyhkv040006dz2t9dajd1xh","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>近期想重新整理一下博客了，作为自己的一些技术积累，方便自己日后翻阅，并且日后如果有了新的感悟可以进行迭代。<br>以前使用Github Pages搞过（实际上只是折腾搭个博客，文档没写几篇，现在这个从历史经验看大概率也是这个下场），<br>后来看了小林coding的使用vuepress搭建了个人博客，而且vue个人比较感兴趣所以打算采用vuepress重新整一下博客。<br>因为vssue是官方维护的评论插件，所以打算来用它作为评论系统，平台选择gitee即码云（国内的访问方便，现在代码仓库也基本用gitee了）。<br>应为这个vssue和gitee配合使用存在问题，才有了这篇文章。（希望作者维护一下， 毕竟我也不会整前端，只能搞个自用的解决方案）</p>\n<h3 id=\"vuepress\"><a href=\"#vuepress\" class=\"headerlink\" title=\"vuepress\"></a><a href=\"https://vuepress.vuejs.org/zh/\">vuepress</a></h3><p>Vue 驱动的静态网站生成器，类似于<a href=\"https://jekyllrb.com/docs/github-pages/\">GitHub Pages的jekyll</a>。<br>目前了解主要有两种应用，一种是文档， 一种是博客。</p>\n<h3 id=\"vssue\"><a href=\"#vssue\" class=\"headerlink\" title=\"vssue\"></a><a href=\"https://vssue.js.org/zh/\">vssue</a></h3><p>vuepress 官方开发的评论插件，利用git平台的issue功能来实现评论功能。<br>目前支持多个平台，包括 GitHub, GitLab, Bitbucket, Gitee 和 Gitea。<br>码云的插件为@vssue/api-gitee-v5</p>\n<h3 id=\"码云评论插件\"><a href=\"#码云评论插件\" class=\"headerlink\" title=\"码云评论插件\"></a><a href=\"https://vssue.js.org/zh/guide/gitee.html\">码云评论插件</a></h3><p>码云评论插件需要在码云平台上创建一个第三方应用来使用， 一般用户就可以，不需要使用企业版。</p>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>使用vssue+gitee搭的评论系统， 在登录时会提示无效的登录回调地址。<br>这是由于码云只支持单个的url地址回调导致的。<br>@vssue/api-gitee-v5插件在调用码云接口时采用的回调地址为当前的url地址，如<a href=\"http://localhost:8080/2022/10/29/vuepress-quick-start/\">http://localhost:8080/2022/10/29/vuepress-quick-start/</a><br>而一般码云上配置的应用回调地址为<a href=\"http://localhost:8080/%E3%80%82%E8%BF%99%E4%B8%A4%E4%B8%AA%E7%9A%84url%E4%B8%8D%E5%8C%B9%E9%85%8D%E5%AF%BC%E8%87%B4%E4%BA%86%E7%A0%81%E4%BA%91%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6%E6%97%A0%E6%B3%95%E6%AD%A3%E5%B8%B8%E4%BD%BF%E7%94%A8%E3%80%82\">http://localhost:8080/。这两个的url不匹配导致了码云评论插件无法正常使用。</a><br><a href=\"https://vssue.js.org/zh/demo/gitee.html\">官方demo</a>也存在这个问题，但是没有维护了。<br><img src=\"/images/2022/gitee-callback-error.png\" alt=\"码云接口回调异常\"></p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><ol>\n<li>请求的回调地址改为码云上配置的回调地址，并缓存当前的页面地址</li>\n<li>码云回调后自动到之前的缓存地址。</li>\n</ol>\n<h3 id=\"修改vssue中api-gitee-v5的源码\"><a href=\"#修改vssue中api-gitee-v5的源码\" class=\"headerlink\" title=\"修改vssue中api-gitee-v5的源码,\"></a>修改vssue中api-gitee-v5的源码,</h3><ol>\n<li>增加callbackURL参数, 此参数目前固定为当前的<code>window.location.protocol + &#39;//&#39; + window.location.host</code>即默认的主页地址.</li>\n<li>去掉proxy的参数, 当前gitee平台接口已经支持CORS,需要配置代理了.而且vssue默认配置的代理已经无法访问了.</li>\n<li>在向码云平台请求的接口的redirect_uri参数均改为callbackURL.</li>\n<li>在向码云进行应用授权时缓存当前路径的path.使用<code>sessionStorage.setItem(&#39;cacheOriginPath&#39;, this.getCurrentPath());</code></li>\n</ol>\n<h3 id=\"修改博客项目的enhanceApp-js\"><a href=\"#修改博客项目的enhanceApp-js\" class=\"headerlink\" title=\"修改博客项目的enhanceApp.js\"></a>修改博客项目的enhanceApp.js</h3><p>因为主页没有评论模块,所以vssue相关代码还没有初始化,无法处理缓存的path.(可能也有办法,但在博客项目改一下也简单)<br>如果当前有缓存的path, 则跳转到对应的path路径下.<br>enhanceApp.js</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">function getCacheOriginPath() &#123;</span><br><span class=\"line\">    const cacheOriginPath = sessionStorage.getItem(&#x27;cacheOriginPath&#x27;);</span><br><span class=\"line\">    sessionStorage.setItem(&#x27;cacheOriginPath&#x27;, &#x27;&#x27;);</span><br><span class=\"line\">    console.log(`get cacheOriginPath  $&#123;cacheOriginPath&#125;`);</span><br><span class=\"line\">    return cacheOriginPath || &#x27;&#x27;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">export default (&#123;</span><br><span class=\"line\">                    Vue, // the version of Vue being used in the VuePress app</span><br><span class=\"line\">                    options, // the options for the root Vue instance</span><br><span class=\"line\">                    router, // the router instance for the app</span><br><span class=\"line\">                    siteData // site metadata</span><br><span class=\"line\">                &#125;) =&gt; &#123;</span><br><span class=\"line\">    // ...apply enhancements to the app</span><br><span class=\"line\">    console.log(&quot;enhanceApp ...&quot;,)</span><br><span class=\"line\">    const cacheOriginPath = getCacheOriginPath()</span><br><span class=\"line\">    if (cacheOriginPath) &#123;</span><br><span class=\"line\">        console.log(&quot;change path&quot;, window.location.href, cacheOriginPath)</span><br><span class=\"line\">        window.location.href = window.location.protocol + &#x27;//&#x27; + window.location.host + cacheOriginPath + window.location.search;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// http://localhost:8080/2022/10/29/vuepress-quick-start/</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h2><ol>\n<li>使用<code>@vuepress/theme-blog</code>搭建好博客, 引用<code>@vssue/api-gitee-v5</code>码云模块并做相应的配置.</li>\n<li>拉取修改过的vssue项目<code>git clone  git@gitee.com:eleksbai/vssue.git</code></li>\n<li>进入项目根路径安装依赖<code>cd vssue &amp;&amp; yarn install</code></li>\n<li>编译码云评论模块 <code>cd packages/@vssue/api-gitee-v5 &amp;&amp; yarn build</code></li>\n<li>在码云模块路径下将编译的码云链接到系统<code>yarn link</code></li>\n<li>进入到博客项目, 链接刚刚编译的码云模块<code>yarn link @vssue/api-gitee-v5</code></li>\n<li>运行博客项目测试效果<code>yarn dev</code></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>近期想重新整理一下博客了，作为自己的一些技术积累，方便自己日后翻阅，并且日后如果有了新的感悟可以进行迭代。<br>以前使用Github Pages搞过（实际上只是折腾搭个博客，文档没写几篇，现在这个从历史经验看大概率也是这个下场），<br>后来看了小林coding的使用vuepress搭建了个人博客，而且vue个人比较感兴趣所以打算采用vuepress重新整一下博客。<br>因为vssue是官方维护的评论插件，所以打算来用它作为评论系统，平台选择gitee即码云（国内的访问方便，现在代码仓库也基本用gitee了）。<br>应为这个vssue和gitee配合使用存在问题，才有了这篇文章。（希望作者维护一下， 毕竟我也不会整前端，只能搞个自用的解决方案）</p>\n<h3 id=\"vuepress\"><a href=\"#vuepress\" class=\"headerlink\" title=\"vuepress\"></a><a href=\"https://vuepress.vuejs.org/zh/\">vuepress</a></h3><p>Vue 驱动的静态网站生成器，类似于<a href=\"https://jekyllrb.com/docs/github-pages/\">GitHub Pages的jekyll</a>。<br>目前了解主要有两种应用，一种是文档， 一种是博客。</p>\n<h3 id=\"vssue\"><a href=\"#vssue\" class=\"headerlink\" title=\"vssue\"></a><a href=\"https://vssue.js.org/zh/\">vssue</a></h3><p>vuepress 官方开发的评论插件，利用git平台的issue功能来实现评论功能。<br>目前支持多个平台，包括 GitHub, GitLab, Bitbucket, Gitee 和 Gitea。<br>码云的插件为@vssue/api-gitee-v5</p>\n<h3 id=\"码云评论插件\"><a href=\"#码云评论插件\" class=\"headerlink\" title=\"码云评论插件\"></a><a href=\"https://vssue.js.org/zh/guide/gitee.html\">码云评论插件</a></h3><p>码云评论插件需要在码云平台上创建一个第三方应用来使用， 一般用户就可以，不需要使用企业版。</p>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>使用vssue+gitee搭的评论系统， 在登录时会提示无效的登录回调地址。<br>这是由于码云只支持单个的url地址回调导致的。<br>@vssue/api-gitee-v5插件在调用码云接口时采用的回调地址为当前的url地址，如<a href=\"http://localhost:8080/2022/10/29/vuepress-quick-start/\">http://localhost:8080/2022/10/29/vuepress-quick-start/</a><br>而一般码云上配置的应用回调地址为<a href=\"http://localhost:8080/%E3%80%82%E8%BF%99%E4%B8%A4%E4%B8%AA%E7%9A%84url%E4%B8%8D%E5%8C%B9%E9%85%8D%E5%AF%BC%E8%87%B4%E4%BA%86%E7%A0%81%E4%BA%91%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6%E6%97%A0%E6%B3%95%E6%AD%A3%E5%B8%B8%E4%BD%BF%E7%94%A8%E3%80%82\">http://localhost:8080/。这两个的url不匹配导致了码云评论插件无法正常使用。</a><br><a href=\"https://vssue.js.org/zh/demo/gitee.html\">官方demo</a>也存在这个问题，但是没有维护了。<br><img src=\"/images/2022/gitee-callback-error.png\" alt=\"码云接口回调异常\"></p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><ol>\n<li>请求的回调地址改为码云上配置的回调地址，并缓存当前的页面地址</li>\n<li>码云回调后自动到之前的缓存地址。</li>\n</ol>\n<h3 id=\"修改vssue中api-gitee-v5的源码\"><a href=\"#修改vssue中api-gitee-v5的源码\" class=\"headerlink\" title=\"修改vssue中api-gitee-v5的源码,\"></a>修改vssue中api-gitee-v5的源码,</h3><ol>\n<li>增加callbackURL参数, 此参数目前固定为当前的<code>window.location.protocol + &#39;//&#39; + window.location.host</code>即默认的主页地址.</li>\n<li>去掉proxy的参数, 当前gitee平台接口已经支持CORS,需要配置代理了.而且vssue默认配置的代理已经无法访问了.</li>\n<li>在向码云平台请求的接口的redirect_uri参数均改为callbackURL.</li>\n<li>在向码云进行应用授权时缓存当前路径的path.使用<code>sessionStorage.setItem(&#39;cacheOriginPath&#39;, this.getCurrentPath());</code></li>\n</ol>\n<h3 id=\"修改博客项目的enhanceApp-js\"><a href=\"#修改博客项目的enhanceApp-js\" class=\"headerlink\" title=\"修改博客项目的enhanceApp.js\"></a>修改博客项目的enhanceApp.js</h3><p>因为主页没有评论模块,所以vssue相关代码还没有初始化,无法处理缓存的path.(可能也有办法,但在博客项目改一下也简单)<br>如果当前有缓存的path, 则跳转到对应的path路径下.<br>enhanceApp.js</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">function getCacheOriginPath() &#123;</span><br><span class=\"line\">    const cacheOriginPath = sessionStorage.getItem(&#x27;cacheOriginPath&#x27;);</span><br><span class=\"line\">    sessionStorage.setItem(&#x27;cacheOriginPath&#x27;, &#x27;&#x27;);</span><br><span class=\"line\">    console.log(`get cacheOriginPath  $&#123;cacheOriginPath&#125;`);</span><br><span class=\"line\">    return cacheOriginPath || &#x27;&#x27;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">export default (&#123;</span><br><span class=\"line\">                    Vue, // the version of Vue being used in the VuePress app</span><br><span class=\"line\">                    options, // the options for the root Vue instance</span><br><span class=\"line\">                    router, // the router instance for the app</span><br><span class=\"line\">                    siteData // site metadata</span><br><span class=\"line\">                &#125;) =&gt; &#123;</span><br><span class=\"line\">    // ...apply enhancements to the app</span><br><span class=\"line\">    console.log(&quot;enhanceApp ...&quot;,)</span><br><span class=\"line\">    const cacheOriginPath = getCacheOriginPath()</span><br><span class=\"line\">    if (cacheOriginPath) &#123;</span><br><span class=\"line\">        console.log(&quot;change path&quot;, window.location.href, cacheOriginPath)</span><br><span class=\"line\">        window.location.href = window.location.protocol + &#x27;//&#x27; + window.location.host + cacheOriginPath + window.location.search;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// http://localhost:8080/2022/10/29/vuepress-quick-start/</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h2><ol>\n<li>使用<code>@vuepress/theme-blog</code>搭建好博客, 引用<code>@vssue/api-gitee-v5</code>码云模块并做相应的配置.</li>\n<li>拉取修改过的vssue项目<code>git clone  git@gitee.com:eleksbai/vssue.git</code></li>\n<li>进入项目根路径安装依赖<code>cd vssue &amp;&amp; yarn install</code></li>\n<li>编译码云评论模块 <code>cd packages/@vssue/api-gitee-v5 &amp;&amp; yarn build</code></li>\n<li>在码云模块路径下将编译的码云链接到系统<code>yarn link</code></li>\n<li>进入到博客项目, 链接刚刚编译的码云模块<code>yarn link @vssue/api-gitee-v5</code></li>\n<li>运行博客项目测试效果<code>yarn dev</code></li>\n</ol>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clcyhkuzu0000dz2t0jbq2rpp","category_id":"clcyhkv000002dz2t2qzp9vns","_id":"clcyhkv060009dz2thaoa8n4t"},{"post_id":"clcyhkuzz0001dz2t4v0r5gir","category_id":"clcyhkv040007dz2tfw742ei6","_id":"clcyhkv06000cdz2tbfgg6adn"}],"PostTag":[{"post_id":"clcyhkv020003dz2tf1u5hb04","tag_id":"clcyhkv030005dz2tgbfmemah","_id":"clcyhkv06000adz2t7cdz038q"},{"post_id":"clcyhkv030004dz2te4828orz","tag_id":"clcyhkv050008dz2tafqo7yhw","_id":"clcyhkv07000ddz2tbmzt2g39"},{"post_id":"clcyhkv040006dz2t9dajd1xh","tag_id":"clcyhkv030005dz2tgbfmemah","_id":"clcyhkv07000edz2tc83pgm25"}],"Tag":[{"name":"vuepress","_id":"clcyhkv030005dz2tgbfmemah"},{"name":"blog","_id":"clcyhkv050008dz2tafqo7yhw"}]}}